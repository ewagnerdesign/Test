class Admin::UsersController < AdminController

  before_filter :get_user, :only => [:show, :edit, :update, :destroy, :unlock]

  # GET /users
  # GET /users.xml
  def index
    page = params[:page]
    @users = User.ascend_by_login.paginate(:page => page)
    respond_to do |format|
      format.html # index.html.erb
      format.xml  { render :xml => @users }
      format.js  {
        if page.blank?
          render :file => 'admin/users/index.html.erb'
        else
          render(:update) {|page| page[:users_index].replace :file => "admin/users/index" }
        end
      }
    end
  end

  # GET /users/1
  # GET /users/1.xml
  def show
    respond_to do |format|
      format.html # show.html.erb
      format.xml  { render :xml => @user }
      format.js   #show.js.rjs
    end
  end

  # GET /users/new
  # GET /users/new.xml
  def new
    @user = User.new

    respond_to do |format|
      format.html # new.html.erb
      format.xml  { render :xml => @user }
      format.js  #new.js.rjs
    end
  end

  # GET /users/1/edit
  def edit
    respond_to do |format|
      format.html # edit.html.erb
      format.js  #edit.js.rjs
    end
  end

  # POST /users
  # POST /users.xml
  def create
    @user = User.new(params[:user])
    respond_to do |format|
      if @user.save_without_session_maintenance
        flash[:notice] = 'User was successfully created.'
        format.html { redirect_to(@user) }
        format.xml  { render :xml => @user, :status => :created, :location => @user }
        format.js   #create.js.rjs
      else
        format.html { render :action => "new" }
        format.xml  { render :xml => @user.errors, :status => :unprocessable_entity }
        format.js   #create.js.rjs
      end
    end
  end

  # PUT /users/1
  # PUT /users/1.xml
  def update
    @user.attributes = params[:user]

    respond_to do |format|
      if @user.save_without_session_maintenance
        flash[:notice] = 'User was successfully updated.'
        format.html { redirect_to(@user) }
        format.xml  { head :ok }
        format.js
      else
        format.html { render :action => "edit" }
        format.xml  { render :xml => @user.errors, :status => :unprocessable_entity }
        format.js
      end
    end
  end

  # DELETE /users/1
  # DELETE /users/1.xml
  def destroy
    @user.destroy

    respond_to do |format|
      format.html { redirect_to(@user) }
      format.xml  { head :ok }
      format.js
    end
  end

  def unlock
    @user.crypted_password = @user.password_salt = nil # force password randomization during save
    @user.first_login = true #force user to change password instead of autogenerated
    @user.login_locked = nil
    @user.save!
    flash[:notice] = "User '#{@user.full_name}' has been successfully unlocked."
  end

  # TO BE REMOVED
  def logins
    @logins = LoginAttempt.descend_by_created_at.paginate(:page => params[:page])
    respond_to do |format|
      format.html
      format.js
    end
  end

  private

  def get_user
    @user = User.find(params[:id])
  end

end
